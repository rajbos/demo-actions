name: New release

on:   
  push:
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10
      - 'Sprint-*'
  
  workflow_dispatch:
  
# Declare default GITHUB_TOKEN permissions as read only.
permissions: read-all
 
jobs:
  setup:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:

      - name: Create some commits
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "clone the repo"
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          git clone https://x:$GITHUB_TOKEN@github.com/rajbos/demo-actions.git
          cd demo-actions

          # loop the code 5 times
          for i in {1..5}
          do
            echo "create a commit $i"            
            git checkout -b "new-branch-$i"
            git config --local user.email "actions"
            git config --local user.name "GitHub Actions"
            date >> test/auto-example-$i.txt
            git add .
            git commit -m "commit for feature $i"  
            git push --set-upstream origin new-branch-$i
          
            echo "create a PR"
            gh pr create --title "Adding new feature $i" --body "release: ${{ github.ref }}" --label "enhancement"
          done

      - name: Approve the PRs with different user
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
        run: |
          echo "clone the repo"
          cd ..
          echo $PWD
          mkdir temp
          cd temp
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          git clone https://x:$GITHUB_TOKEN@github.com/rajbos/demo-actions.git
          cd demo-actions
          
          # loop the code 5 times
          for i in {1..5}
          do        
            git checkout "new-branch-$i"

            # Approve the PR
            gh pr review --approve
            gh pr merge --rebase --delete-branch      
          done
          
      - uses: SOLIDSoftworks/semver-tags@v1
        name: Generate new tag
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN}}
          tag-prefix: 'v'
          default-version: '0.0.1'
          
      - name: Push new tag
        run: |
          git clone https://x:$GITHUB_TOKEN@github.com/rajbos/demo-actions.git
          cd demo-actions
          
          git config user.name 'GitHub Actions'
          git config user.email 'GitHubActions@github.com'
          
          git push --tags

  publish:
    runs-on: ubuntu-latest
    needs: setup
    permissions:
      contents: write
      pull-requests: write
    steps:
       # get tag for this release
      - name: Get tag value
        id: tag
        uses: devops-actions/action-get-tag@4e13c4ea459efa2988a10d5ff0f252bb097929ef # v1.0.1

      # publish a release with the build assets
      - uses: rajbos-actions/action-gh-release@de2c0eb89ae2a093876385947365aca7b0e5f844 # v1
        id: publish
        with:
          name: Release ${{ steps.tag.outputs.tag }}
          tag_name: ${{ github.ref }}
          #body: Release ${{ steps.tag.outputs.tag }} is available now
          #files: ./dist/main.js
          token: ${{ secrets.PAT }}
          generate_release_notes: true

      - uses: rajbos-actions/slack@ed1309ab9862e57e9e583e51c7889486b9a00b0f # v2.0.0
        with: 
          status: ${{ job.status }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: always()
